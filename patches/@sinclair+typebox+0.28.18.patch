diff --git a/node_modules/@sinclair/typebox/typebox.d.ts b/node_modules/@sinclair/typebox/typebox.d.ts
index cca279f..b96652d 100644
--- a/node_modules/@sinclair/typebox/typebox.d.ts
+++ b/node_modules/@sinclair/typebox/typebox.d.ts
@@ -183,8 +183,14 @@ export interface TInteger extends TSchema, NumericOptions<number> {
     type: 'integer';
 }
 export type TUnevaluatedProperties = undefined | TSchema | boolean;
-export interface IntersectOptions extends SchemaOptions {
+export interface IntersectOptions<T extends TSchema[] = TSchema[]> extends SchemaOptions {
     unevaluatedProperties?: TUnevaluatedProperties;
+    default?: TupleToIntersect<{
+        [K in keyof T]: Static<AssertType<T[K]>, []>;
+    }>;
+    examples?: Array<TupleToIntersect<{
+        [K in keyof T]: Static<AssertType<T[K]>, []>;
+    }>>;
 }
 export interface TIntersect<T extends TSchema[] = TSchema[]> extends TSchema, IntersectOptions {
     [Kind]: 'Intersect';
@@ -249,12 +255,14 @@ export type TProperties = Record<keyof any, TSchema>;
 export type ObjectProperties<T> = T extends TObject<infer U> ? U : never;
 export type ObjectPropertyKeys<T> = T extends TObject<infer U> ? keyof U : never;
 export type TAdditionalProperties = undefined | TSchema | boolean;
-export interface ObjectOptions extends SchemaOptions {
+export interface ObjectOptions<T extends TProperties = TProperties> extends SchemaOptions {
     additionalProperties?: TAdditionalProperties;
     minProperties?: number;
     maxProperties?: number;
+    default?: PropertiesReduce<T, []>;
+    examples?: PropertiesReduce<T, []>[];
 }
-export interface TObject<T extends TProperties = TProperties> extends TSchema, ObjectOptions {
+export interface TObject<T extends TProperties = TProperties> extends TSchema, ObjectOptions<T> {
     [Kind]: 'Object';
     static: PropertiesReduce<T, this['params']>;
     additionalProperties?: TAdditionalProperties;
@@ -671,7 +679,7 @@ export declare class StandardTypeBuilder extends TypeBuilder {
     Intersect(allOf: [], options?: SchemaOptions): TNever;
     /** `[Standard]` Creates a Intersect type */
     Intersect<T extends [TSchema]>(allOf: [...T], options?: SchemaOptions): T[0];
-    Intersect<T extends TSchema[]>(allOf: [...T], options?: IntersectOptions): TIntersect<T>;
+    Intersect<T extends TSchema[]>(allOf: [...T], options?: IntersectOptions<T>): TIntersect<T>;
     /** `[Standard]` Creates a KeyOf type */
     KeyOf<T extends TSchema>(schema: T, options?: SchemaOptions): TKeyOf<T>;
     /** `[Standard]` Creates a Literal type */
@@ -685,7 +693,7 @@ export declare class StandardTypeBuilder extends TypeBuilder {
     /** `[Standard]` Creates a Number type */
     Number(options?: NumericOptions<number>): TNumber;
     /** `[Standard]` Creates an Object type */
-    Object<T extends TProperties>(properties: T, options?: ObjectOptions): TObject<T>;
+    Object<T extends TProperties>(properties: T, options?: ObjectOptions<T>): TObject<T>;
     /** `[Standard]` Creates a mapped type whose keys are omitted from the given type */
     Omit<T extends TSchema, K extends (keyof Static<T>)[]>(schema: T, keys: readonly [...K], options?: SchemaOptions): TOmit<T, K[number]>;
     /** `[Standard]` Creates a mapped type whose keys are omitted from the given type */
